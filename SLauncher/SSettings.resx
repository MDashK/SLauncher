<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEANDEAAAEAGACMHwAAFgAAACgAAAA0AAAAYgAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAjHx4jHx4jHx4jHx4kHx4kHx4kHxwkHxwkHxwkHxwkIBsmIBsmIBsnHhomHhclHRYmHRQmHRQmHRQm
        HRQnHBQnHBQnHBQnHBQmHRQmHRQmHRQmHRQmHRQmHRQmHRQmHRQmHBUkHBUnHRYmHRkkHhkjHxokHxwk
        HxwkHxwjHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4fHx8fHx8jHh8kHx4mHh4mHxwoHxso
        HxstJR4oIBklHhUlHhUpIBclHBMmGxMpHhYoHxYoHxYmHRMqIBYnGxErHxUoHBIqHRUnHBQoHhckGhMp
        IRomHBUnHhUnHBQoHhQnHBQmHRQpHhYkGhMsIhsiGhMgFxMmIBsmIBskHxwkHxwkHxwjHx4jHx4hHx8h
        Hx8jHx4jHx4jHx4jHx4dHyAfHx8hHx8kHx4mHxwoHxsqHxspHxgjGhEmHRQmIBUoIhcgFw0oHhQqHhQm
        HBIlHBMlHhUiFw8oHhQnGxErHBMpGhEoGxMmGhQkGRUmHRkgFxMkGRUmHBUkGREoHhQnHBQnHBQlGhIm
        GxMiGRAnHhUlHRYiGhMjHRgkHhkjHhskHxwjHx4jHx4jHx4hHx4jHx4jHx4jHx4jHx4fHx8fHx8hHx8k
        Hx4mHxwnHhooHRkoHhcjHBMnIBcmHxYbFAssIxonHhUpHhYpHhYjGRIpIhkiFw8oHRUpHBQqHRUrHhYn
        GxUlGhYhGBUoHxwbFRAnHhopIRolHBMrIhkiGBErIRoqIBkjGRIlGxQoHhcjGhYlHBghGxYiHBciHRoj
        HhskHxwkIR0jIBwjHx4jHx4jHx4jHx4jHx4fHx8hHx4jHx4kHxwlHhsmHRknHRYkHBUmHxYjHBMkHRQe
        Fw4rIhkjGhEmGhQlGxQjGxQxKSIlGxQnHBQoGxMpHRcrHxkmGxc8MzA3MC0nHx8gGRYpIB0lHBggFg8k
        GxIsIhsgFg8pHxgfFQ4mHBUlHRYmHRkoHxsgGhUhGxYhHBkiHRojHhskHxwkHxwjIBwjHx4jHx4jHx4j
        Hx4hHx4hIBwjIBwjHhslHhslHBgkHBUkHBUkHBUgGhMkHhcrJR4dFQ4kHBUpHholGhYqIR06MisuJB0p
        HxgnGxUqHhgrIBwqIR5jW1teWVglHyAjHh0mHxwmHRknHRYsIhtLQj4jGhYqIR0nHhofFhIlHBggFxMb
        FRAiHBciHBciHBciHBcjHRgkHhklHxokHxwjHx4jHx4jHx4jHx4hIBwjIBwjHhskHRolHBglHBgkHBUk
        HBUhGxQlHxghGxQYEgskGxcmHRkoHRkoHRklHBgxKCQrIRomHBUkGBIlGhYkGxg0LCyMhoeIgoMtJygf
        GRoeFhYiGRUpHhosIhsqHxskGxcfFhInHhomHRknHhocFhEpIx4jHRgiHBciHBchGxYiHBcjHRglHxom
        IBskHxwjHx4jHx4jHx4jIBsjIBsiHhkjHRgkGxckGxckGxckGxchGxYgGhUgHBcpIx4nHhoiGRUgFBIl
        GRcgFREiFxMmGhYrHxsrIBwtIh4uJSJXT0+6tLW2sbNUT1EsJicmHh4oHxslGhYeFA0cEQ0vJCAiGRUi
        GRUkGxcYDwssJiEhGxYiHBciHBckGxckGxclHRYmHhcnHxglHxokHxwjHx4jHx4jHx4jIBsjHxokHhki
        HBckGxckGxckGxclHBgoIh0aFA8zLyp/eXQeFREqIR0mGxcoHRktIR0oHBY1KSVEODJLPztMQT1QR0OK
        hYLa1NXc19iGgYNPSUpNRkNORUFDNzEzJyEuIhwgFg8kGRUjGhYmHRkoHxuAd3MzLSghGxYhGxYkGxcl
        HBgmHhcmHhcnHxglHxokHxwjHx4jHx4jHx4lIhokIRkgGhMhGxQnHhomGxcjGhYjGhYmIBscFhEnIRws
        JiEnHxgjGxQoHhcqHhg8LihJPDRIOjQ1KCA8MCpFOzRXTkqnop/a1dTa1tWjnp9gW1o9NDE+My84KyNM
        PzdQQzs4LSUpHRcnHRYnHRYrIxwoHxsmHRkjGhYlHBgfFxAjGxQhFxApHxgnHhUmHhcjHhsjHx4kIB8k
        IB8lIhomIxsiHBUjGxQlGhYjGBQjGhYoHxseGBMlHxopIx4eFg8jGxQuJRwzKCBJPDRFNCtALyZSQThc
        TURjV01uY1uro5ze2NPg29jd2tbc2dWknZpvZGBaTUVVRj1RQTU+LyZJOjFJPTMxJBwpHhYiGBEoHhck
        GxckGxcnHhomHhcsJB0pHxgpHxglHBMmHhcjHhsjHx4kIB8kIB8hHhYgHRUfGRQhGBQoHRkmGxckGhMk
        HBUrJR4gGhMhGRIoIRgkGxI+NCpCNixFNSlMOSxdRztYRThbSj1SQjauopbh2M7b1MvZ1s7g3Nfi3tnb
        08ypnpZXST1cSz5ZRjdcSz5QPzI4KBxOPjJBMikrHhYjFxEpHxgrIBwmGxcfFhIkGxclGxQnHRYlHBMm
        HhcjHhsjHx4jHx4jHx4jIBgkHhclHBgkGxcpHhopHhokGhMoHhcdFQ4hHBMtJh0eFQtKQDZFOS04Kh5e
        TUBdRjdpUEBYQTFhTTxiUkLYy73u4tbn3tTb1s3j3tXf2tHj2tDe0MRaSjphTTxfSTdaRjVeSjljUEE5
        KBtGNipIOTAwIxsmGhQnHRYnHBglHBgoHxspHxgoHhclGxQjGxQjHhsjHx4jHx4jHx4mIBskHhknHhoi
        GRUjGBQkGRUhFxAqIBkkHRQpIhkgFw1JQTRBNig9MCBpWUlVQTBlSzpcQS1hSDRgSzZ2ZVKomojk18fn
        3tDKxLfKxLns5Nfg18mun493ZlNVQCtZQixhSTVUPChaRDJvW0pDMyNCMiVBNSsqHxckGhMoHhcpIBwk
        GxchGBQgGBEkHBUkHhkjHhsiHh0jHx4jHx4lHxodFxIiGRUjGhYwJSE0KSUmHBUmHBUwJx4lHxQ3LyJI
        PzFBNCRfUT9VQzJUPyphRjFeQipmTDRaQixdSDJlV0Hr383o3s2lno+rpJXd1Mbo28tfUD1bRjBqUjpk
        SzFeRCxlTTdUPChVPy1nVURGNiZDNSk9MScqHxckGhMhGBQiGRUsIx8sIx8qIhshGxYiHRoiHh0jHx4j
        Hx4qIyAeFxQjGhcqHhw7LytCNjItIRsnHRYfFg0vJhxNRDY6MiFcUD5PQS5QPypgSTNjRy9iQypiRCtn
        TTVbRSxhUTrx5M7h2MSFfmtza1rm3s3o3MpvXklkTjVcQyliRyxjSC5gRStkSjJPNyNSPixjUEE9LSFN
        QTc0KSEkGhMjGhYvJiJBODQ4LysrIh4cFhEiHRoiHh0jHx4jHx4nIB0hGBUoHBoiFhQmGhYsIBwhFQ8p
        HhYyJx9COSw5LiBbTz1URjNLPSdVRS5SPiVXQCZgSCxhSjBaRSpVRCpfTzi6rZeBdmKVi3makH6JfWu6
        rJlYSDFYRSphSStoUDJdRSleRipUPSNUPiVTPilYRzRfUEA1JxtJPTMuIhwkGhMjGhYqIR0eFREhGBQn
        IRwiHRwiHh0jHx4jHx4oHxslHBgkGRUmGxclGRUkGBQrHRcpHBQ4KCFIOi5QQTFQQi9QQixNPiRPPiNU
        RilQRChTSCyUimyckXVSRyxQRS9eUz9+cWGjk4aXiHiCcmFhUz1SQylZSSyhj3CVg2RXRypZSSxUQiVP
        PCFJOB5aSjNNPitNPy1FOS00KiArIRofFxAoIh0kHhkfFhIlHxohHBsiHh0kIB8jHx4oIBkiGhMeFREl
        GhYoHRkmGhYoHBYvIhpIOTA8LiJQQTFJOyhKPCVHOx9NPyJLQCBNRyqfnX/m4sXb1bh8dVpcUzhLQSln
        WkSHeGWXhnFuXkdWRy1TRSmJe17Yyant4MClm31XTS9NQiRSRCdQQiZAMRdFNyBcTjs9MiRIPjQoHxYp
        IRohGxYkHhkoHxsfGRQhHBkiHh0kIB8jHx4kHhcmIBkhGxYhGBQlHBgnHBglGxQrIBhMQjhANSdLPy1C
        NyFGOyBHPCBKPyFhWDe6tpnx79Hn48ZmYENaUjR+dVSXjWuGelZ4bEhpWzeFdlWXiGiAcFNbSy53aUzp
        3sDt6Mm5tpdWUTJFPR9JPiJKPyRIPiZGPSlCOStGPTMkHRQoIBkfFhIfFhIrIRosIx8hHBkiHh0kIB8j
        Hx4lHxgkHhchGxYhGxYpIBwlHBgkHBU5MCc8MylTSjw6MyA4MhtHQCVNSCluZ0bl4L/g3b7k4sShnYFV
        TDFQRiiakWyNhFjPxpT/+MH99cDOxJWJfVWdjm1fUTRSQymkm4Dx79Hj5sbe3795d1hEQCNLRCk5NBs7
        NCBVTj86MSc5MikjGxQuJSErIBwiGBEhGBQhHBkiHh0kIB8jHx4mIh0cGBMcGBMiHhkpIx4gGhUnIRpR
        SkE0LiNTTD1HQS5EQChWUjasqYrj4b/m5MLp58js6sxVTzhHPSWPhWdeVi7m36b/+7j69q/59K//97zm
        3KxlVzOKfGBGOCFkXUTn687j68zZ3r7a3b2pqYtRUDRHQypHQi1OSjg6NCdUTUQgGBEpHxgsIhspHRcs
        IR0hHBkiHh0kIB8jHx4kIBsiHhkmIh0fGxYiHBcrJR46NC1bV0xfWUxaVUZmYk+joYnb2r7m58fy8c/g
        4b/v8M60s5dFPipEOyd8cVWTi2P//sH59qvv7Jvq6Zn28K/78sCUiGSHemBJPCZCPCWqr5Lp9NTn79Dr
        8tHi58ja3L+ZmH5mY05kYE5XUURdVk03LyguJB0oHhcnGxUjGBQhHBkiHh0kIB8jHx4nIRwhGxYhGxYX
        EQwvKSRuaGGspp/g3NHm49Xt69nn5tLT07vR07bLzq7a27nLz6xuck9RUzajnItZUUB+c12lnHf//8Xr
        65/n6JLs65r49bH58sCmnXuIfmZXTjqqpZBGTTJvelq5waLS2LnP07bX2bzW1bvl4s3o5dbt6tzn4tmy
        raRoYFkxJyAmGxMmHBUhHBkiHh0kIB8jHx4rIh4aFA8nHholHxoiGRUmIBk4MShYVElcWUtZV0Vsa1eq
        qpLq7M/199nt8ND6/tv1+9iOknU7Nic4LyWBd2aEelz798L09a3t753z9qf08rL//c2FfV97dGA1Lhsu
        LRmPk3rq9Nbz+Nv6/uHr7dDu7dOxr5dsaVRbVkdUUEVTTkUzLiUkHBUlHRYsIxoiGhMhHBkiHh0kIB8j
        Hx4qHxsjGhYnHBggFxMpHxgnHxgqIRhPST4/OSxBPSs0MB0+PCRVVDq+vqDv79Hm6cn1/Nnu89Y4NScz
        KyR0aWFNRDDd2q7//8T4+rT5/Lf//cfY1q1QTDB3c2ArJxU7PCjr7tXz+N3u79Xs69HFwahXUzo5NR02
        MB1EPzBAOi9KRTwqJB0lHxghGRIjHBMmHhcfGhciHh0kIB8jHx4rIBwlGhYmGxcjGBQoHhcmHBUoHxZO
        RTs5MyY+OSovKxgsKRQwLxU8Ox9paEzb3b/l7Mv0+d54dmslHxo4LSmIf3FqZUS0tITv8Ljr67WzsoZg
        XjyDgWktKxksLBp2d2P19N/u7tbd28NoZEs5Mxw6NB0uJxMvKBU9Nic6NClJQzwiHBUeGBEhGxQmHhce
        GBEfGhciHh0kIB8jHx4sIBwlGRUmGhYlGRUpHRklGRMnHhVMQzk0LB86MyQwKRgrJRIuKxY0Mho0Mxk0
        NhmIjW7n69Lg3tM8NjE3LS1aUUiEgGhmZEJLSyM/PxdjYUKHhmxeXUkvLx02NiTi48/k4cyOiXQ4Mx42
        MBk9NCAoHwswJhQuJhU8NCczLSJFPzgdGRQaFhEeGxMjHRYdFxIfGhciHh0kIB8jHx4sIBwlGRUlGRUm
        GxcqHhokGRUpHxhIPzYyKR9FPTAnIBEqIxImIg8eGwY0MhonKA4xNBpRUz3f3dK4sq1KQ0A2LSkiHQ7B
        v6diX0NmZUnBv6chIAwrKRdLSzm6uqje38taVkMyLRgmIQwyKxcnHgoyKBYjGQgoHxFGPTMwKyJAOjUh
        HRgeGhUcGBMhGxQhGxYfGhciHh0kIB8jHx4qHxslGhYkGRUlHBgoHRkhGBQmHhc9Ni0sJhtFPzInIRQm
        IRIgHAopJRI5NSImIw4aGQQvLhphXlDr5t15c2wqJB0lIRaYlYahnYqenYmNi3kpJhchHg93dWPq6NZZ
        WEQkIw8kIw8lIQ42MB0qIxAlHgswKBcmHhFHQDc1Lyg5My4hHBkgGhUfGRQjGxQiHBcfGhciHh0kIB8j
        Hx4qHxskGxciGRUkGxckGxcgFxMjGxQuJh8/OC9GQDUuKB0jHRAoIxQkIA4ZFQNIRDInIA8lHg8qIhWi
        nJF4cmcfGhEmIhdXU0jX1MbY1cdOSz0gHQ8pJheCfmyYlIIjIg4gIA4cHgs+PCokIA0jHQogGQgqIxQw
        Kh09Ni07NS4uJyQcFxQbFRAhGxYlHBgfGRQfGhciHh0kIB8jHx4nHhokHhkhGxYiHBciHBceGBMfGRIh
        GxREPzYvKyA8OC0rKBoXFAYeGwwkIRJMRzgzKh0gFwojGgw1Lh90b2AiHA8iHhNoZFnw7uT6+O5jX1Qf
        HA4fGgt0bVw3MB8hHQsiIxMkKhdKTDkfHw0gHgwmIhAmIRI8Nis1LiU+ODEhGhceFxQeFRIjGhYmGxcg
        FxMfGhciHh0kIB8jHx4kHhkkHhkhGxYjHRgjHRghGxYhGxQcFg80LyY0LyZDPjUpJRohHRIeGw0ZFggh
        HhAoHxUrIhgjHRAYEgUlIhQWEgceHBJzcGjHxb3Jx79vbWMgHhMYFQckHhEcFgkbGAoeIREhJxQZHQoX
        GQYcHAoeGwwpIxZBOzAzLiU+ODEYEg0kHhkjGhchGBQiFxMkGxcfGhciHh0kIB8jHx4oHxwkGxgiGRYm
        HRotJCAuJSEmIBkfGRIjHRZFQDcoIxpEQDUgHBEZFQokIBUWFAkXFQoYGAxXVkw9OzMSEgwTEw0XFhLE
        w79ramZzc23AwLoUFQwSEwoYFg5BPjlSUUcaHQ0ZHQoVFwQYGgcbGwsiIRM7NywtKB9LRT4kHhcgGBEf
        FxAxJiItIxwhFxAkGxchHBkiHh0jHx4kIB8sIyAkGxgfFhMlHBkwJyM0KycrJR4hGxQjHRYmIBlFQDc1
        MCczLyQbFwwZFQogHhMVFwsMEAU0Ny43OTMgIR8XGBYfHx+rrKpzdHBiY1+rracdHxkbHBgSEw8zNDIy
        MiwREQMTFQIbHAwSEwMYFwkrKR4/OjFAOjMxKyQeGBEoIBkrIxw7MSo2LCUlGxQgFxMhHBkiHh0jHx4k
        IB8kHRogGRYeFxQfGBUjHRgkHhkhGxYdFxIfGRIqJB08Ny4tKB9APDEoJBkXEwgVEwgUFAgUFQsQEQgL
        CwUJBwYXFRQdGxpSUE+WlZGSkY1SUkwhIRsJCQMVFBASEA8NDQcZGQ0SEgISEQMdGxAqKB1DQTcyLCU7
        NTApIBwfFhIjGhYcEw8kGRUpHhokGRUjGhYiHRoiHh0jHx4kIB8kHRokHRokHRohGhcfGRQeGBMfGRQg
        GhUfGRIcFg8iHRRKRTwsKB1PS0AnIxgYFgsSEgYPEAYGBwASEgwREAwLCQgJBwYaGRVramZ5eXMSEgwN
        DQcFBQAGBgAMCwcQDQgNCwEVEwgYFgwlIxlBPjYoJR1BOzYkHhkkGxchGBUmHRogFxQiFxMmGxcjGBQj
        GhciHRwiHh0jHx4jHx4oICAkHBwgGRYgGRYjHBkkHRojHRghGxYmIBkmIBkhHBMcFw5MRz4oIxpHQjkx
        LyUMDAATEggPDQUQDQgJBgIJBgIOCwcUEQ1KR0NGQz4TEAsPDQUTEAsNCgUOCwcJBgEVEgoQCwI6NC07
        NS4rJSBIQj0sIyAnHhsfFhMgFxQlHBknHhsoHBooHBokGBYlHBkjHh0jHx4jHx4jHx4lHR0kHBwiGxgg
        GRYfGBUeFxQfGRQfGRQdFxAgGhMgGhMlIBckHxZAOzIzLiU1MCdCQDUgIBQIBQALCQETDgsQDQkOCQYR
        DgllYVxhX1cOCwMMCgIJBQAMCQQJBAERDQgdFxJKRD8xKyY4Mi1OR0QlHhsdFBEeFRIkGhohFxceFRIi
        GRYhFRMjFxUkGBYpIB0kHx4jHx4kIB8jHx4kHx4nIiEoIyAkHxwfGBUcFRIeGBMiHBcgGhUgGhMmIBkd
        FxAiHBUfGRI/OTJAOzIqJhs6OC07NS4jIBgQCQYJBAEUDgkVEQxqZF9zcGgUDgcNCwEWEAkMCQEiHBc5
        My49NzIvJiNHPjtANzQeFRIkGxgpIB0kGxgjGhcmHRoiGRYpIB0kGxclHBgjGhYjHBkkHx4jHx4kIB8j
        Hx4kHx4iHRwhHBkgGxgiGxgiGxggGhUfGRQjHRgdFxI2MCmGgHkgGhMaFA0hGxQsJh9DPjU6NSwsJh84
        Mi1FPjs9NjM4Mi0tJyJybGVqZVwtKB89OC8+ODE/OTIyLCczLShCOTZLQj8oHxweFRIoHxwfFhOGfXoz
        KiYhGBUmHRkgFxQkGxceFRElHBgmHRkmIBskHxwkIB8kIB8jHx4kHx4kHx4kHx4jHh0iHRogGxgdGBUc
        FxQfGRQgGhUhGxYiHBciHBciHBchGxQgGhMiGxIoIRhEPDVIPzs8MzAzKictJCA7Mi5yamN0bWQwKSAx
        KiE1LSY3LyhFPDhBODUvJiImHRkiGRUhGBQiGRUmHRknHhokHBUjGhYjGxQiGRUjGxQhGxQjHRYlHxgm
        IBskHxwjHx4jHx4jHx4kHx4kHx4kHx4kHx4iHRogGxgeGRYdGBUhGxYhGxYiHBciHBciHBchGxYgGhMg
        GhMjGxQkHBUhGBQmHRkuJSI3LitGPTlNRT5hWVJhWlFTTUJDPDM3Lyg6MiscExAoHxwfFhIgFxMlHBgn
        HhohGBQeFREiGhMlHRYiGhMiGhMiGhMhGxQiHBUkHhcmIBklIRwjIBwjHx4jHx4jHx4jHx4jHx4jHx4j
        Hx4jHh0iHRwgGxgfGhchGhchGhchGhchGhchGxYhGxYjGhYjGhYhGBQmHRkoHxsbEg8dFBEmHRoiGRUr
        IxxAODFAOTAmHxYhGhEgGBElHRYcExAjGhcxKCQnHhojGhYkGxcjGxQhGRIhGxQhGxQfGRIgGhMhGxQg
        HRUiHxcjIBgkIBslIRwjIBwjHx4jHx4jHx4jHx4jHx4jHx4jHx4kHx4jHh0iHRohHBkgGRYgGRYgGRYg
        GRYgGhUhGxYjGhYkGxcnHhpBODQtJCEqIR4lHBkYDwwoHxsmHhdlXVZiW1InIBclHhUjGxQdFBAsIyAk
        GxhANzQsIx8fFhIhGBQkGxclHRYjHRYgGhMgGhMfHBQgHRUiHhkjHxokIBskIBslIB0jHx4jHx4jHx4j
        Hx4jHx4jHx4jHx4jHx4jHx4jHx4jHh0jHh0gGxggGxghGhcgGRYgGRYgGRYjGhcjGhcjGhclHBkiGBgb
        EREjGRkmHRohGBQrIxw0LCUzLCMnIBcjHBMhGRIiGRUdFBEiGRYpIB0iGRYiGRYlHBggGhUeGBMgGhUh
        GxYgHBchHRgiHhkiHxsjIBwjIBwjIBwjHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4jHx4kHx4k
        Hx4jHhsjHhsjHBkiGxghGhcgGRYiGRYiGRYgFxQoHxwaEBAlGxsrISEfFRUkGxgfFhIeFg8eFw4pIhkm
        HxYlHBgoHxsdExMnHR0eFBQeFRIkGxgmHRofGBUeGBMiHBcjHxojHxojHhsjIBwjHx4jHx4jHh8iHR4i
        HR4jHx4jHx4jHx4jHx4hHx4hHx4jHx4jHx4jHx4jHx4kHx4kHx4lIB8lIB8mHh4lHR0kHRojHBklHBkk
        GxgoHh4hFxcoHh4iGBggFhYkGhofFhMqIR0nHxgmHhcgGRAhGhEiGRUgFxMjGRklGxsnHR0lGxsjGxsj
        GxshGRklHhsmIR4jHhskHxwjHx4jHx4kHyAhHx8hHiAhHiAhHiAjHh8jHx4jHx4jHx4hHx4hHx4jHx4j
        Hx4jHx4jHx4kHx4kHx4lIB8kHx4mHh4mHh4mHxwmHxwoHxwoHxwnHR0kGhosIiIqICAnHR0qICAoHxwp
        IBwmHRklHRYpIhkqIxoqIR0nHhonHR0pHx8mGx0nHB4nHx8lHR0jGxsnHx8nIh8hHBkkIB8kIB8kHyAk
        HyAhHiAhHiAhHSIhHiAjHh8jHx4jHx4jHx4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>